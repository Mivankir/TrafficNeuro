from datetime import datetime


def percent_to_score(percent):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ (0-1) –≤ –±–∞–ª–ª—ã (0-5)"""
    if percent < 0.2:
        return 1
    elif percent < 0.4:
        return 2
    elif percent < 0.6:
        return 3
    elif percent < 0.8:
        return 4
    else:
        return 5


def get_traffic_level_description(score):
    """–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–±–æ–∫ –ø–æ –±–∞–ª–ª–∞–º"""
    descriptions = {
        1: "üü¢ –°–≤–æ–±–æ–¥–Ω–æ (1/5)",
        2: "üü° –£–º–µ—Ä–µ–Ω–Ω–æ (2/5)",
        3: "üü† –ó–∞–≥—Ä—É–∂–µ–Ω–æ (3/5)",
        4: "üî¥ –ü—Ä–æ–±–∫–∏ (4/5)",
        5: "üî¥üöóüí® –°–∏–ª—å–Ω—ã–µ –ø—Ä–æ–±–∫–∏ (5/5)"
    }
    return descriptions.get(score, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")


def generate_traffic_message(current_level, prediction=None):
    now = datetime.now()
    current_score = percent_to_score(current_level)

    message = f"üö¶ –î–æ—Ä–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –í–æ—Ä–æ–Ω–µ–∂–µ ({now.strftime('%H:%M %d.%m')}):\n"
    message += f"{get_traffic_level_description(current_score)}\n"

    if prediction is not None:
        prediction_score = percent_to_score(prediction)
        message += "\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å:\n"
        message += f"{get_traffic_level_description(prediction_score)}"

    message += "\n\n" + "üöó" * current_score + "üöô" * (5 - current_score)

    return message
