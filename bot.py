import logging
import sqlite3
from datetime import datetime

from telegram import Update, InputFile, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from config import TOKEN, DB_NAME
from tomtom_api import get_current_traffic
from database import insert_traffic_data, get_record_count
from models import predict_traffic, train_model
from utils import generate_traffic_message
from visualization import generate_traffic_plot, generate_prediction_plot

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

last_record_count = 0


async def check_retrain(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
    global last_record_count
    current_count = get_record_count()

    if current_count >= last_record_count + 500:
        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {current_count - last_record_count} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ...")
        if train_model():
            last_record_count = current_count
            await context.bot.send_message(
                chat_id=context.job.chat_id,
                text="üîÅ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!"
            )


async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    global last_record_count
    last_record_count = get_record_count()
    logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {last_record_count}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    menu_buttons = [
        ["üö¶ –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–∫–∏"],
        ["üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —á–∞—Å"],
        ["üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –¥–µ–Ω—å"],
        ["üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]

    reply_markup = ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True)

    await update.message.reply_text(
        "üöó <b>–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–±–æ–∫ –í–æ—Ä–æ–Ω–µ–∂–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
        "‚Ä¢ /current - —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–±–æ–∫\n"
        "‚Ä¢ /predict - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å\n"
        "‚Ä¢ /plot –î–î.–ú–ú.–ì–ì–ì–ì - –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–±–æ–∫ –∑–∞ –¥–µ–Ω—å\n"
        "‚Ä¢ /predict_plot –î–î.–ú–ú.–ì–ì–ì–ì - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å\n\n"
        f"üìä –í –±–∞–∑–µ: {get_record_count()} –∑–∞–ø–∏—Å–µ–π",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    await update.message.reply_text(
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:</b>\n"
        "‚Ä¢ /plot 15.05.2025 - –≥—Ä–∞—Ñ–∏–∫ –∑–∞ 15 –º–∞—è 2025\n"
        "‚Ä¢ /predict_plot 20.05.2025 - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 20 –º–∞—è\n\n"
        "üìÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞—Ç—ã –æ—Ç 2020 –¥–æ 2030 –≥–æ–¥–∞\n"
        "üïí –ì—Ä–∞—Ñ–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –¥–Ω–µ–π, –∫–æ–≥–¥–∞ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ\n\n"
        "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç",
        parse_mode='HTML'
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫)"""
    text = update.message.text

    if text == "üö¶ –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–∫–∏":
        await current_traffic(update, context)
    elif text == "üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —á–∞—Å":
        await predict(update, context)
    elif text == "üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –¥–µ–Ω—å":
        context.user_data['last_action'] = 'plot'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 12.05.2025")
    elif text == "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å":
        context.user_data['last_action'] = 'predict_plot'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: 15.05.2025")
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif "." in text and len(text.split(".")) == 3:
        try:
            datetime.strptime(text, "%d.%m.%Y")

            if context.user_data.get('last_action') == 'predict_plot':
                context.args = [text]
                await predict_plot(update, context)
            else:
                context.args = [text]
                await show_plot(update, context)
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    else:
        await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help")


async def current_traffic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    traffic_level = get_current_traffic()
    if traffic_level is not None:
        insert_traffic_data(traffic_level)
        message = generate_traffic_message(traffic_level)
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–∫–∞—Ö.")


async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    day_of_week = now.weekday()
    hour_of_day = now.hour + 1

    if hour_of_day > 23:
        hour_of_day = 0
        day_of_week = (day_of_week + 1) % 7

    prediction = predict_traffic(day_of_week, hour_of_day)

    if prediction is not None:
        current_level = get_current_traffic()
        message = generate_traffic_message(current_level, prediction)
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")


async def update_traffic_data(context: ContextTypes.DEFAULT_TYPE):
    traffic_level = get_current_traffic()
    if traffic_level is not None:
        insert_traffic_data(traffic_level)
        logger.info(f"Updated traffic data: {traffic_level}")


async def show_plot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plot"""
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /plot –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ü—Ä–∏–º–µ—Ä: /plot 12.05.2025\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /dates"
        )
        return

    date_str = context.args[0]
    msg = await update.message.reply_text(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –∑–∞ {date_str}...")

    buf, error = generate_traffic_plot(date_str)

    if error:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=msg.message_id,
            text=f"‚ùå {error}"
        )
        return

    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=InputFile(buf),
        caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–±–æ–∫ –∑–∞ {date_str}"
    )
    await context.bot.delete_message(
        chat_id=update.effective_chat.id,
        message_id=msg.message_id
    )
    buf.close()


async def show_available_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ"""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    cursor.execute('''
    SELECT DISTINCT date(timestamp) as day 
    FROM traffic_data 
    ORDER BY day DESC
    LIMIT 30
    ''')

    dates = [row[0] for row in cursor.fetchall()]
    conn.close()

    if not dates:
        await update.message.reply_text("–í –±–∞–∑–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return

    text = "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:\n" + "\n".join(
        f"- {datetime.strptime(d, '%Y-%m-%d').strftime('%d.%m.%Y')}"
        for d in dates
    )

    await update.message.reply_text(text)


async def predict_plot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /predict_plot"""
    if not context.args and update.message.text and "." in update.message.text:
        date_str = update.message.text
    elif context.args:
        date_str = context.args[0]
    else:
        await update.message.reply_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ü—Ä–∏–º–µ—Ä: /predict_plot 15.05.2025\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã –¥–∞—Ç—ã –¥–æ 2030 –≥–æ–¥–∞"
        )
        return

    try:
        date_obj = datetime.strptime(date_str, "%d.%m.%Y").date()
        current_year = datetime.now().year

        if date_obj.year < 2020 or date_obj.year > 2030:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ–∂–¥—É 2020 –∏ 2030 –≥–æ–¥–æ–º"
            )
            return

        if (datetime.now().date() - date_obj).days > 365:
            await update.message.reply_text(
                "üìÖ –≠—Ç–∞ –¥–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º"
            )
            return

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ü—Ä–∏–º–µ—Ä: 15.05.2025"
        )
        return

    status_msg = await update.message.reply_text(f"üîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date_str}...")

    buf, error = generate_prediction_plot(date_str)

    if error:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=status_msg.message_id,
            text=f"‚ùå {error}"
        )
        return

    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=InputFile(buf),
        caption=f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–±–æ–∫ –Ω–∞ {date_str}"
    )
    await context.bot.delete_message(
        chat_id=update.effective_chat.id,
        message_id=status_msg.message_id
    )
    buf.close()


def main():
    application = Application.builder().token(TOKEN).post_init(post_init).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("current", current_traffic))
    application.add_handler(CommandHandler("predict", predict))
    application.add_handler(CommandHandler("plot", show_plot))
    application.add_handler(CommandHandler("dates", show_available_dates))
    application.add_handler(CommandHandler("predict_plot", predict_plot))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    application.job_queue.run_repeating(
        check_retrain,
        interval=21600,
        first=10
    )

    application.run_polling()


if __name__ == '__main__':
    main()
